// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GetActivitiesFilteredDetailsParamsIsDone.
const (
	GetActivitiesFilteredDetailsParamsIsDoneAll   GetActivitiesFilteredDetailsParamsIsDone = "all"
	GetActivitiesFilteredDetailsParamsIsDoneFalse GetActivitiesFilteredDetailsParamsIsDone = "false"
	GetActivitiesFilteredDetailsParamsIsDoneTrue  GetActivitiesFilteredDetailsParamsIsDone = "true"
)

// Defines values for GetActivitiesFilteredDetailsYearParamsIsDone.
const (
	GetActivitiesFilteredDetailsYearParamsIsDoneAll   GetActivitiesFilteredDetailsYearParamsIsDone = "all"
	GetActivitiesFilteredDetailsYearParamsIsDoneFalse GetActivitiesFilteredDetailsYearParamsIsDone = "false"
	GetActivitiesFilteredDetailsYearParamsIsDoneTrue  GetActivitiesFilteredDetailsYearParamsIsDone = "true"
)

// Activity defines model for activity.
type Activity struct {
	Design    *int    `json:"design,omitempty"`
	Expense   int     `json:"expense"`
	Feature   string  `json:"feature"`
	IsDone    bool    `json:"isDone"`
	Remark    string  `json:"remark"`
	SponsorID int     `json:"sponsorID"`
	Url       *string `json:"url,omitempty"`
	UserID    int     `json:"userID"`
}

// ActivityInformation defines model for activity_information.
type ActivityInformation struct {
	ActivityID      *int    `json:"activityID,omitempty"`
	BucketName      *string `json:"bucketName,omitempty"`
	DesignProgress  *int    `json:"designProgress,omitempty"`
	FileInformation *string `json:"fileInformation,omitempty"`
	FileName        *string `json:"fileName,omitempty"`
	FileType        *string `json:"fileType,omitempty"`
}

// ActivityStyle defines model for activity_style.
type ActivityStyle struct {
	ActivityID     int `json:"activityID"`
	SponsorStyleID int `json:"sponsorStyleID"`
}

// DestroyTeacherIDs defines model for destroyTeacherIDs.
type DestroyTeacherIDs struct {
	DeleteIDs []float32 `json:"deleteIDs"`
}

// DestroyUserIDs defines model for destroyUserIDs.
type DestroyUserIDs struct {
	DeleteIDs []float32 `json:"deleteIDs"`
}

// Division defines model for division.
type Division struct {
	FinancialRecordID int    `json:"financialRecordID"`
	Name              string `json:"name"`
}

// DivisionDetails defines model for divisionDetails.
type DivisionDetails struct {
	Divisions *[]DivisionWithBalance `json:"divisions,omitempty"`
	Total     *Total                 `json:"total,omitempty"`
}

// DivisionWithBalance defines model for divisionWithBalance.
type DivisionWithBalance struct {
	Balance         *int    `json:"balance,omitempty"`
	Budget          *int    `json:"budget,omitempty"`
	Expense         *int    `json:"expense,omitempty"`
	FinancialRecord *string `json:"financialRecord,omitempty"`
	Id              *int    `json:"id,omitempty"`
	Name            *string `json:"name,omitempty"`
}

// FestivalItem defines model for festivalItem.
type FestivalItem struct {
	Amount     int     `json:"amount"`
	DivisionId int     `json:"divisionId"`
	Memo       *string `json:"memo,omitempty"`
	Name       string  `json:"name"`
}

// FestivalItemDetails defines model for festivalItemDetails.
type FestivalItemDetails struct {
	FestivalItems *[]FestivalItemWithBalance `json:"festivalItems,omitempty"`
	Total         *Total                     `json:"total,omitempty"`
}

// FestivalItemWithBalance defines model for festivalItemWithBalance.
type FestivalItemWithBalance struct {
	Balance         *int    `json:"balance,omitempty"`
	Budget          *int    `json:"budget,omitempty"`
	Division        *string `json:"division,omitempty"`
	Expense         *int    `json:"expense,omitempty"`
	FinancialRecord *string `json:"financialRecord,omitempty"`
	Id              *int    `json:"id,omitempty"`
	Memo            *string `json:"memo,omitempty"`
	Name            *string `json:"name,omitempty"`
}

// FinancialRecord defines model for financialRecord.
type FinancialRecord struct {
	Name   string `json:"name"`
	YearId int    `json:"year_id"`
}

// FinancialRecordDetails defines model for financialRecordDetails.
type FinancialRecordDetails struct {
	FinancialRecords *[]FinancialRecordWithBalance `json:"financialRecords,omitempty"`
	Total            *Total                        `json:"total,omitempty"`
}

// FinancialRecordWithBalance defines model for financialRecordWithBalance.
type FinancialRecordWithBalance struct {
	Balance *int    `json:"balance,omitempty"`
	Budget  *int    `json:"budget,omitempty"`
	Expense *int    `json:"expense,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Name    *string `json:"name,omitempty"`
	Year    *int    `json:"year,omitempty"`
}

// PasswordResetData defines model for passwordResetData.
type PasswordResetData struct {
	ConfirmPassword *string `json:"confirmPassword,omitempty"`
	Password        *string `json:"password,omitempty"`
	Token           *string `json:"token,omitempty"`
}

// Receipt defines model for receipt.
type Receipt struct {
	BucketName       *string `json:"bucketName,omitempty"`
	FileName         *string `json:"fileName,omitempty"`
	FileType         *string `json:"fileType,omitempty"`
	PurchaseReportID int     `json:"purchaseReportID"`
	Remark           *string `json:"remark,omitempty"`
}

// Sponsor defines model for sponsor.
type Sponsor struct {
	Address        string `json:"address"`
	Email          string `json:"email"`
	Id             *int   `json:"id,omitempty"`
	Name           string `json:"name"`
	Representative string `json:"representative"`
	Tel            string `json:"tel"`
}

// SponsorStyle defines model for sponsorStyle.
type SponsorStyle struct {
	Feature string `json:"feature"`
	Price   int    `json:"price"`
	Style   string `json:"style"`
}

// Total defines model for total.
type Total struct {
	Balance *int `json:"balance,omitempty"`
	Budget  *int `json:"budget,omitempty"`
	Expense *int `json:"expense,omitempty"`
}

// YearPeriods defines model for year_periods.
type YearPeriods struct {
	EndedAt   string `json:"endedAt"`
	StartedAt string `json:"startedAt"`
	Year      int    `json:"year"`
}

// GetActivitiesFilteredDetailsParams defines parameters for GetActivitiesFilteredDetails.
type GetActivitiesFilteredDetailsParams struct {
	// IsDone 完了状態を表すフラグ
	IsDone *GetActivitiesFilteredDetailsParamsIsDone `form:"is_done,omitempty" json:"is_done,omitempty"`

	// SponsorStyleId スポンサースタイルIDの配列
	SponsorStyleId *[]int `form:"sponsor_style_id,omitempty" json:"sponsor_style_id,omitempty"`

	// Keyword キーワード検索用の文字列
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty"`
}

// GetActivitiesFilteredDetailsParamsIsDone defines parameters for GetActivitiesFilteredDetails.
type GetActivitiesFilteredDetailsParamsIsDone string

// GetActivitiesFilteredDetailsYearParams defines parameters for GetActivitiesFilteredDetailsYear.
type GetActivitiesFilteredDetailsYearParams struct {
	// IsDone 完了状態を表すフラグ
	IsDone *GetActivitiesFilteredDetailsYearParamsIsDone `form:"is_done,omitempty" json:"is_done,omitempty"`

	// SponsorStyleId スポンサースタイルIDの配列
	SponsorStyleId *[]int `form:"sponsor_style_id,omitempty" json:"sponsor_style_id,omitempty"`

	// Keyword キーワード検索用の文字列
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty"`
}

// GetActivitiesFilteredDetailsYearParamsIsDone defines parameters for GetActivitiesFilteredDetailsYear.
type GetActivitiesFilteredDetailsYearParamsIsDone string

// PostBudgetsParams defines parameters for PostBudgets.
type PostBudgetsParams struct {
	// Price price
	Price int `form:"price" json:"price"`

	// YearId year_id
	YearId *int `form:"year_id,omitempty" json:"year_id,omitempty"`

	// SourceId source_id
	SourceId *int `form:"source_id,omitempty" json:"source_id,omitempty"`
}

// PutBudgetsIdParams defines parameters for PutBudgetsId.
type PutBudgetsIdParams struct {
	// Price price
	Price *int `form:"price,omitempty" json:"price,omitempty"`

	// YearId year_id
	YearId *int `form:"year_id,omitempty" json:"year_id,omitempty"`

	// SourceId source_id
	SourceId *int `form:"source_id,omitempty" json:"source_id,omitempty"`
}

// PostBureausParams defines parameters for PostBureaus.
type PostBureausParams struct {
	// Name name
	Name string `form:"name" json:"name"`
}

// PutBureausIdParams defines parameters for PutBureausId.
type PutBureausIdParams struct {
	// Name name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// PostDepartmentsParams defines parameters for PostDepartments.
type PostDepartmentsParams struct {
	// Name name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// PutDepartmentsIdParams defines parameters for PutDepartmentsId.
type PutDepartmentsIdParams struct {
	// Name name
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// PostExpensesParams defines parameters for PostExpenses.
type PostExpensesParams struct {
	// Name name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// YearId year_id
	YearId *string `form:"year_id,omitempty" json:"year_id,omitempty"`
}

// PutExpensesIdParams defines parameters for PutExpensesId.
type PutExpensesIdParams struct {
	// Name name
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// YearId year_id
	YearId *string `form:"year_id,omitempty" json:"year_id,omitempty"`
}

// GetFestivalItemsParams defines parameters for GetFestivalItems.
type GetFestivalItemsParams struct {
	// Year year
	Year *int `form:"year,omitempty" json:"year,omitempty"`

	// DivisionId division_id
	DivisionId *int `form:"division_id,omitempty" json:"division_id,omitempty"`
}

// GetFinancialRecordsParams defines parameters for GetFinancialRecords.
type GetFinancialRecordsParams struct {
	// Year year
	Year *int `form:"year,omitempty" json:"year,omitempty"`
}

// PostFundInformationsParams defines parameters for PostFundInformations.
type PostFundInformationsParams struct {
	// UserId user_id
	UserId int `form:"user_id" json:"user_id"`

	// TeacherId teacher_id
	TeacherId int `form:"teacher_id" json:"teacher_id"`

	// Price price
	Price int `form:"price" json:"price"`

	// Remark remark
	Remark *string `form:"remark,omitempty" json:"remark,omitempty"`

	// IsFirstCheck is_first_check
	IsFirstCheck *bool `form:"is_first_check,omitempty" json:"is_first_check,omitempty"`

	// IsLastCheck is_last_check
	IsLastCheck *bool `form:"is_last_check,omitempty" json:"is_last_check,omitempty"`

	// ReceivedAt received_at
	ReceivedAt *string `form:"received_at,omitempty" json:"received_at,omitempty"`
}

// PutFundInformationsIdParams defines parameters for PutFundInformationsId.
type PutFundInformationsIdParams struct {
	// UserId user_id
	UserId int `form:"user_id" json:"user_id"`

	// TeacherId teacher_id
	TeacherId int `form:"teacher_id" json:"teacher_id"`

	// Price price
	Price int `form:"price" json:"price"`

	// Remark remark
	Remark *string `form:"remark,omitempty" json:"remark,omitempty"`

	// IsFirstCheck is_first_check
	IsFirstCheck *bool `form:"is_first_check,omitempty" json:"is_first_check,omitempty"`

	// IsLastCheck is_last_check
	IsLastCheck *bool `form:"is_last_check,omitempty" json:"is_last_check,omitempty"`

	// ReceivedAt received_at
	ReceivedAt *string `form:"received_at,omitempty" json:"received_at,omitempty"`
}

// PostPasswordResetRequestParams defines parameters for PostPasswordResetRequest.
type PostPasswordResetRequestParams struct {
	// Email email
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// PostPasswordResetIdValidParams defines parameters for PostPasswordResetIdValid.
type PostPasswordResetIdValidParams struct {
	// Token token
	Token *string `form:"token,omitempty" json:"token,omitempty"`
}

// PostSourcesParams defines parameters for PostSources.
type PostSourcesParams struct {
	// Name name
	Name string `form:"name" json:"name"`
}

// PutSourcesIdParams defines parameters for PutSourcesId.
type PutSourcesIdParams struct {
	// Name name
	Name string `form:"name" json:"name"`
}

// PostTeachersParams defines parameters for PostTeachers.
type PostTeachersParams struct {
	// Name 名前
	Name string `form:"name" json:"name"`

	// Position 役職
	Position string `form:"position" json:"position"`

	// DepartmentId 学科ID
	DepartmentId *int `form:"department_id,omitempty" json:"department_id,omitempty"`

	// Room 部屋番号
	Room *string `form:"room,omitempty" json:"room,omitempty"`

	// IsBlack ブラックリストの真偽
	IsBlack *bool `form:"is_black,omitempty" json:"is_black,omitempty"`

	// Remark 備考
	Remark *string `form:"remark,omitempty" json:"remark,omitempty"`
}

// PutTeachersIdParams defines parameters for PutTeachersId.
type PutTeachersIdParams struct {
	// Name 教員の名前
	Name string `form:"name" json:"name"`

	// Position 教員の役職
	Position string `form:"position" json:"position"`

	// DepartmentId 学科ID
	DepartmentId *int `form:"department_id,omitempty" json:"department_id,omitempty"`

	// Room 部屋番号
	Room *string `form:"room,omitempty" json:"room,omitempty"`

	// IsBlack ブラックリストに入っているか
	IsBlack *bool `form:"is_black,omitempty" json:"is_black,omitempty"`

	// Remark 備考欄
	Remark *string `form:"remark,omitempty" json:"remark,omitempty"`
}

// PostUsersParams defines parameters for PostUsers.
type PostUsersParams struct {
	// Name name
	Name string `form:"name" json:"name"`

	// BureauId bureau_d
	BureauId int `form:"bureau_id" json:"bureau_id"`

	// RoleId role_id
	RoleId int `form:"role_id" json:"role_id"`
}

// PutUsersIdParams defines parameters for PutUsersId.
type PutUsersIdParams struct {
	// Name name
	Name string `form:"name" json:"name"`

	// BureauId bureau_d
	BureauId int `form:"bureau_id" json:"bureau_id"`

	// RoleId role_id
	RoleId int `form:"role_id" json:"role_id"`
}

// PostYearsParams defines parameters for PostYears.
type PostYearsParams struct {
	// Year year
	Year int `form:"year" json:"year"`
}

// PutYearsIdParams defines parameters for PutYearsId.
type PutYearsIdParams struct {
	// Year year
	Year int `form:"year" json:"year"`
}

// PostActivitiesJSONRequestBody defines body for PostActivities for application/json ContentType.
type PostActivitiesJSONRequestBody = Activity

// PutActivitiesIdJSONRequestBody defines body for PutActivitiesId for application/json ContentType.
type PutActivitiesIdJSONRequestBody = Activity

// PostActivityInformationsJSONRequestBody defines body for PostActivityInformations for application/json ContentType.
type PostActivityInformationsJSONRequestBody = ActivityInformation

// PutActivityInformationsIdJSONRequestBody defines body for PutActivityInformationsId for application/json ContentType.
type PutActivityInformationsIdJSONRequestBody = ActivityInformation

// PostActivityStylesJSONRequestBody defines body for PostActivityStyles for application/json ContentType.
type PostActivityStylesJSONRequestBody = ActivityStyle

// PutActivityStylesIdJSONRequestBody defines body for PutActivityStylesId for application/json ContentType.
type PutActivityStylesIdJSONRequestBody = ActivityStyle

// PostDivisionsJSONRequestBody defines body for PostDivisions for application/json ContentType.
type PostDivisionsJSONRequestBody = Division

// PutDivisionsIdJSONRequestBody defines body for PutDivisionsId for application/json ContentType.
type PutDivisionsIdJSONRequestBody = Division

// PostFestivalItemsJSONRequestBody defines body for PostFestivalItems for application/json ContentType.
type PostFestivalItemsJSONRequestBody = FestivalItem

// PutFestivalItemsIdJSONRequestBody defines body for PutFestivalItemsId for application/json ContentType.
type PutFestivalItemsIdJSONRequestBody = FestivalItem

// PostFinancialRecordsJSONRequestBody defines body for PostFinancialRecords for application/json ContentType.
type PostFinancialRecordsJSONRequestBody = FinancialRecord

// PutFinancialRecordsIdJSONRequestBody defines body for PutFinancialRecordsId for application/json ContentType.
type PutFinancialRecordsIdJSONRequestBody = FinancialRecord

// PostPasswordResetIdJSONRequestBody defines body for PostPasswordResetId for application/json ContentType.
type PostPasswordResetIdJSONRequestBody = PasswordResetData

// PostReceiptsJSONRequestBody defines body for PostReceipts for application/json ContentType.
type PostReceiptsJSONRequestBody = Receipt

// PutReceiptsIdJSONRequestBody defines body for PutReceiptsId for application/json ContentType.
type PutReceiptsIdJSONRequestBody = Receipt

// PostSponsorsJSONRequestBody defines body for PostSponsors for application/json ContentType.
type PostSponsorsJSONRequestBody = Sponsor

// PutSponsorsIdJSONRequestBody defines body for PutSponsorsId for application/json ContentType.
type PutSponsorsIdJSONRequestBody = Sponsor

// PostSponsorstylesJSONRequestBody defines body for PostSponsorstyles for application/json ContentType.
type PostSponsorstylesJSONRequestBody = SponsorStyle

// PutSponsorstylesIdJSONRequestBody defines body for PutSponsorstylesId for application/json ContentType.
type PutSponsorstylesIdJSONRequestBody = SponsorStyle

// DeleteUsersDeleteJSONRequestBody defines body for DeleteUsersDelete for application/json ContentType.
type DeleteUsersDeleteJSONRequestBody = DestroyUserIDs

// PostYearsPeriodsJSONRequestBody defines body for PostYearsPeriods for application/json ContentType.
type PostYearsPeriodsJSONRequestBody = YearPeriods

// PutYearsPeriodsIdJSONRequestBody defines body for PutYearsPeriodsId for application/json ContentType.
type PutYearsPeriodsIdJSONRequestBody = YearPeriods

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /activities)
	GetActivities(ctx echo.Context) error

	// (POST /activities)
	PostActivities(ctx echo.Context) error

	// (GET /activities/details)
	GetActivitiesDetails(ctx echo.Context) error

	// (GET /activities/details/{year})
	GetActivitiesDetailsYear(ctx echo.Context, year int) error

	// (GET /activities/filtered_details)
	GetActivitiesFilteredDetails(ctx echo.Context, params GetActivitiesFilteredDetailsParams) error

	// (GET /activities/filtered_details/{year})
	GetActivitiesFilteredDetailsYear(ctx echo.Context, year string, params GetActivitiesFilteredDetailsYearParams) error

	// (DELETE /activities/{id})
	DeleteActivitiesId(ctx echo.Context, id int) error

	// (GET /activities/{id})
	GetActivitiesId(ctx echo.Context, id int) error

	// (PUT /activities/{id})
	PutActivitiesId(ctx echo.Context, id int) error

	// (GET /activity_informations)
	GetActivityInformations(ctx echo.Context) error

	// (POST /activity_informations)
	PostActivityInformations(ctx echo.Context) error

	// (DELETE /activity_informations/{id})
	DeleteActivityInformationsId(ctx echo.Context, id int) error

	// (GET /activity_informations/{id})
	GetActivityInformationsId(ctx echo.Context, id int) error

	// (PUT /activity_informations/{id})
	PutActivityInformationsId(ctx echo.Context, id int) error

	// (GET /activity_styles)
	GetActivityStyles(ctx echo.Context) error

	// (POST /activity_styles)
	PostActivityStyles(ctx echo.Context) error

	// (DELETE /activity_styles/{id})
	DeleteActivityStylesId(ctx echo.Context, id int) error

	// (GET /activity_styles/{id})
	GetActivityStylesId(ctx echo.Context, id int) error

	// (PUT /activity_styles/{id})
	PutActivityStylesId(ctx echo.Context, id int) error

	// (GET /budgets)
	GetBudgets(ctx echo.Context) error

	// (POST /budgets)
	PostBudgets(ctx echo.Context, params PostBudgetsParams) error

	// (GET /budgets/details)
	GetBudgetsDetails(ctx echo.Context) error

	// (GET /budgets/details/{year})
	GetBudgetsDetailsYear(ctx echo.Context, year int) error

	// (DELETE /budgets/{id})
	DeleteBudgetsId(ctx echo.Context, id int) error

	// (GET /budgets/{id})
	GetBudgetsId(ctx echo.Context, id int) error

	// (PUT /budgets/{id})
	PutBudgetsId(ctx echo.Context, id int, params PutBudgetsIdParams) error

	// (GET /budgets/{id}/details)
	GetBudgetsIdDetails(ctx echo.Context, id int) error

	// (GET /bureaus)
	GetBureaus(ctx echo.Context) error

	// (POST /bureaus)
	PostBureaus(ctx echo.Context, params PostBureausParams) error

	// (DELETE /bureaus/{id})
	DeleteBureausId(ctx echo.Context, id int) error

	// (GET /bureaus/{id})
	GetBureausId(ctx echo.Context, id int) error

	// (PUT /bureaus/{id})
	PutBureausId(ctx echo.Context, id int, params PutBureausIdParams) error

	// (GET /departments)
	GetDepartments(ctx echo.Context) error

	// (POST /departments)
	PostDepartments(ctx echo.Context, params PostDepartmentsParams) error

	// (DELETE /departments/{id})
	DeleteDepartmentsId(ctx echo.Context, id int) error

	// (GET /departments/{id})
	GetDepartmentsId(ctx echo.Context, id int) error

	// (PUT /departments/{id})
	PutDepartmentsId(ctx echo.Context, id int, params PutDepartmentsIdParams) error

	// (GET /divisions)
	GetDivisions(ctx echo.Context) error

	// (POST /divisions)
	PostDivisions(ctx echo.Context) error

	// (DELETE /divisions/{id})
	DeleteDivisionsId(ctx echo.Context, id int) error

	// (PUT /divisions/{id})
	PutDivisionsId(ctx echo.Context, id int) error

	// (GET /expenses)
	GetExpenses(ctx echo.Context) error

	// (POST /expenses)
	PostExpenses(ctx echo.Context, params PostExpensesParams) error

	// (GET /expenses/details)
	GetExpensesDetails(ctx echo.Context) error

	// (GET /expenses/details/{year})
	GetExpensesDetailsYear(ctx echo.Context, year int) error

	// (GET /expenses/fiscalyear/{year})
	GetExpensesFiscalyearYear(ctx echo.Context, year int) error

	// (DELETE /expenses/{id})
	DeleteExpensesId(ctx echo.Context, id int) error

	// (GET /expenses/{id})
	GetExpensesId(ctx echo.Context, id int) error

	// (PUT /expenses/{id})
	PutExpensesId(ctx echo.Context, id int, params PutExpensesIdParams) error

	// (GET /expenses/{id}/details)
	GetExpensesIdDetails(ctx echo.Context, id int) error

	// (GET /festival_items)
	GetFestivalItems(ctx echo.Context, params GetFestivalItemsParams) error

	// (POST /festival_items)
	PostFestivalItems(ctx echo.Context) error

	// (DELETE /festival_items/{id})
	DeleteFestivalItemsId(ctx echo.Context, id int) error

	// (PUT /festival_items/{id})
	PutFestivalItemsId(ctx echo.Context, id int) error

	// (GET /financial_records)
	GetFinancialRecords(ctx echo.Context, params GetFinancialRecordsParams) error

	// (POST /financial_records)
	PostFinancialRecords(ctx echo.Context) error

	// (DELETE /financial_records/{id})
	DeleteFinancialRecordsId(ctx echo.Context, id int) error

	// (PUT /financial_records/{id})
	PutFinancialRecordsId(ctx echo.Context, id int) error

	// (GET /fund_informations)
	GetFundInformations(ctx echo.Context) error

	// (POST /fund_informations)
	PostFundInformations(ctx echo.Context, params PostFundInformationsParams) error

	// (GET /fund_informations/details)
	GetFundInformationsDetails(ctx echo.Context) error

	// (GET /fund_informations/details/{year})
	GetFundInformationsDetailsYear(ctx echo.Context, year int) error

	// (DELETE /fund_informations/{id})
	DeleteFundInformationsId(ctx echo.Context, id int) error

	// (GET /fund_informations/{id})
	GetFundInformationsId(ctx echo.Context, id int) error

	// (PUT /fund_informations/{id})
	PutFundInformationsId(ctx echo.Context, id int, params PutFundInformationsIdParams) error

	// (GET /fund_informations/{id}/details)
	GetFundInformationsIdDetails(ctx echo.Context, id int) error

	// (POST /password_reset/request)
	PostPasswordResetRequest(ctx echo.Context, params PostPasswordResetRequestParams) error

	// (POST /password_reset/{id})
	PostPasswordResetId(ctx echo.Context, id int) error

	// (POST /password_reset/{id}/valid)
	PostPasswordResetIdValid(ctx echo.Context, id int, params PostPasswordResetIdValidParams) error

	// (GET /receipts)
	GetReceipts(ctx echo.Context) error

	// (POST /receipts)
	PostReceipts(ctx echo.Context) error

	// (GET /receipts/reports/{id})
	GetReceiptsReportsId(ctx echo.Context, id int) error

	// (DELETE /receipts/{id})
	DeleteReceiptsId(ctx echo.Context, id int) error

	// (GET /receipts/{id})
	GetReceiptsId(ctx echo.Context, id int) error

	// (PUT /receipts/{id})
	PutReceiptsId(ctx echo.Context, id int) error

	// (GET /sources)
	GetSources(ctx echo.Context) error

	// (POST /sources)
	PostSources(ctx echo.Context, params PostSourcesParams) error

	// (DELETE /sources/{id})
	DeleteSourcesId(ctx echo.Context, id int) error

	// (GET /sources/{id})
	GetSourcesId(ctx echo.Context, id int) error

	// (PUT /sources/{id})
	PutSourcesId(ctx echo.Context, id int, params PutSourcesIdParams) error

	// (GET /sponsors)
	GetSponsors(ctx echo.Context) error

	// (POST /sponsors)
	PostSponsors(ctx echo.Context) error

	// (GET /sponsors/periods/{year})
	GetSponsorsPeriodsYear(ctx echo.Context, year int) error

	// (DELETE /sponsors/{id})
	DeleteSponsorsId(ctx echo.Context, id int) error

	// (GET /sponsors/{id})
	GetSponsorsId(ctx echo.Context, id int) error

	// (PUT /sponsors/{id})
	PutSponsorsId(ctx echo.Context, id int) error

	// (GET /sponsorstyles)
	GetSponsorstyles(ctx echo.Context) error

	// (POST /sponsorstyles)
	PostSponsorstyles(ctx echo.Context) error

	// (DELETE /sponsorstyles/{id})
	DeleteSponsorstylesId(ctx echo.Context, id int) error

	// (GET /sponsorstyles/{id})
	GetSponsorstylesId(ctx echo.Context, id int) error

	// (PUT /sponsorstyles/{id})
	PutSponsorstylesId(ctx echo.Context, id int) error

	// (GET /teachers)
	GetTeachers(ctx echo.Context) error

	// (POST /teachers)
	PostTeachers(ctx echo.Context, params PostTeachersParams) error

	// (DELETE /teachers/delete)
	DeleteTeachersDelete(ctx echo.Context) error

	// (GET /teachers/fundRegistered/{year})
	GetTeachersFundRegisteredYear(ctx echo.Context, year int) error

	// (DELETE /teachers/{id})
	DeleteTeachersId(ctx echo.Context, id int) error

	// (GET /teachers/{id})
	GetTeachersId(ctx echo.Context, id int) error

	// (PUT /teachers/{id})
	PutTeachersId(ctx echo.Context, id int, params PutTeachersIdParams) error

	// (GET /users)
	GetUsers(ctx echo.Context) error

	// (POST /users)
	PostUsers(ctx echo.Context, params PostUsersParams) error

	// (DELETE /users/delete)
	DeleteUsersDelete(ctx echo.Context) error

	// (DELETE /users/{id})
	DeleteUsersId(ctx echo.Context, id int) error

	// (GET /users/{id})
	GetUsersId(ctx echo.Context, id int) error

	// (PUT /users/{id})
	PutUsersId(ctx echo.Context, id int, params PutUsersIdParams) error

	// (GET /years)
	GetYears(ctx echo.Context) error

	// (POST /years)
	PostYears(ctx echo.Context, params PostYearsParams) error

	// (GET /years/periods)
	GetYearsPeriods(ctx echo.Context) error

	// (POST /years/periods)
	PostYearsPeriods(ctx echo.Context) error

	// (DELETE /years/periods/{id})
	DeleteYearsPeriodsId(ctx echo.Context, id int) error

	// (PUT /years/periods/{id})
	PutYearsPeriodsId(ctx echo.Context, id int) error

	// (DELETE /years/{id})
	DeleteYearsId(ctx echo.Context, id int) error

	// (GET /years/{id})
	GetYearsId(ctx echo.Context, id int) error

	// (PUT /years/{id})
	PutYearsId(ctx echo.Context, id int, params PutYearsIdParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetActivities converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivities(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetActivities(ctx)
	return err
}

// PostActivities converts echo context to params.
func (w *ServerInterfaceWrapper) PostActivities(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostActivities(ctx)
	return err
}

// GetActivitiesDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivitiesDetails(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetActivitiesDetails(ctx)
	return err
}

// GetActivitiesDetailsYear converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivitiesDetailsYear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year int

	err = runtime.BindStyledParameterWithOptions("simple", "year", ctx.Param("year"), &year, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetActivitiesDetailsYear(ctx, year)
	return err
}

// GetActivitiesFilteredDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivitiesFilteredDetails(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivitiesFilteredDetailsParams
	// ------------- Optional query parameter "is_done" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_done", ctx.QueryParams(), &params.IsDone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_done: %s", err))
	}

	// ------------- Optional query parameter "sponsor_style_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "sponsor_style_id", ctx.QueryParams(), &params.SponsorStyleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sponsor_style_id: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetActivitiesFilteredDetails(ctx, params)
	return err
}

// GetActivitiesFilteredDetailsYear converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivitiesFilteredDetailsYear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year string

	err = runtime.BindStyledParameterWithOptions("simple", "year", ctx.Param("year"), &year, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetActivitiesFilteredDetailsYearParams
	// ------------- Optional query parameter "is_done" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_done", ctx.QueryParams(), &params.IsDone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_done: %s", err))
	}

	// ------------- Optional query parameter "sponsor_style_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "sponsor_style_id", ctx.QueryParams(), &params.SponsorStyleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sponsor_style_id: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetActivitiesFilteredDetailsYear(ctx, year, params)
	return err
}

// DeleteActivitiesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteActivitiesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteActivitiesId(ctx, id)
	return err
}

// GetActivitiesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivitiesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetActivitiesId(ctx, id)
	return err
}

// PutActivitiesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutActivitiesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutActivitiesId(ctx, id)
	return err
}

// GetActivityInformations converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivityInformations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetActivityInformations(ctx)
	return err
}

// PostActivityInformations converts echo context to params.
func (w *ServerInterfaceWrapper) PostActivityInformations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostActivityInformations(ctx)
	return err
}

// DeleteActivityInformationsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteActivityInformationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteActivityInformationsId(ctx, id)
	return err
}

// GetActivityInformationsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivityInformationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetActivityInformationsId(ctx, id)
	return err
}

// PutActivityInformationsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutActivityInformationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutActivityInformationsId(ctx, id)
	return err
}

// GetActivityStyles converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivityStyles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetActivityStyles(ctx)
	return err
}

// PostActivityStyles converts echo context to params.
func (w *ServerInterfaceWrapper) PostActivityStyles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostActivityStyles(ctx)
	return err
}

// DeleteActivityStylesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteActivityStylesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteActivityStylesId(ctx, id)
	return err
}

// GetActivityStylesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetActivityStylesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetActivityStylesId(ctx, id)
	return err
}

// PutActivityStylesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutActivityStylesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutActivityStylesId(ctx, id)
	return err
}

// GetBudgets converts echo context to params.
func (w *ServerInterfaceWrapper) GetBudgets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBudgets(ctx)
	return err
}

// PostBudgets converts echo context to params.
func (w *ServerInterfaceWrapper) PostBudgets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostBudgetsParams
	// ------------- Required query parameter "price" -------------

	err = runtime.BindQueryParameter("form", true, true, "price", ctx.QueryParams(), &params.Price)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter price: %s", err))
	}

	// ------------- Optional query parameter "year_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "year_id", ctx.QueryParams(), &params.YearId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year_id: %s", err))
	}

	// ------------- Optional query parameter "source_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "source_id", ctx.QueryParams(), &params.SourceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostBudgets(ctx, params)
	return err
}

// GetBudgetsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetBudgetsDetails(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBudgetsDetails(ctx)
	return err
}

// GetBudgetsDetailsYear converts echo context to params.
func (w *ServerInterfaceWrapper) GetBudgetsDetailsYear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year int

	err = runtime.BindStyledParameterWithOptions("simple", "year", ctx.Param("year"), &year, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBudgetsDetailsYear(ctx, year)
	return err
}

// DeleteBudgetsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBudgetsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteBudgetsId(ctx, id)
	return err
}

// GetBudgetsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetBudgetsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBudgetsId(ctx, id)
	return err
}

// PutBudgetsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutBudgetsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutBudgetsIdParams
	// ------------- Optional query parameter "price" -------------

	err = runtime.BindQueryParameter("form", true, false, "price", ctx.QueryParams(), &params.Price)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter price: %s", err))
	}

	// ------------- Optional query parameter "year_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "year_id", ctx.QueryParams(), &params.YearId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year_id: %s", err))
	}

	// ------------- Optional query parameter "source_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "source_id", ctx.QueryParams(), &params.SourceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter source_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutBudgetsId(ctx, id, params)
	return err
}

// GetBudgetsIdDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetBudgetsIdDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBudgetsIdDetails(ctx, id)
	return err
}

// GetBureaus converts echo context to params.
func (w *ServerInterfaceWrapper) GetBureaus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBureaus(ctx)
	return err
}

// PostBureaus converts echo context to params.
func (w *ServerInterfaceWrapper) PostBureaus(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostBureausParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostBureaus(ctx, params)
	return err
}

// DeleteBureausId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBureausId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteBureausId(ctx, id)
	return err
}

// GetBureausId converts echo context to params.
func (w *ServerInterfaceWrapper) GetBureausId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBureausId(ctx, id)
	return err
}

// PutBureausId converts echo context to params.
func (w *ServerInterfaceWrapper) PutBureausId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutBureausIdParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutBureausId(ctx, id, params)
	return err
}

// GetDepartments converts echo context to params.
func (w *ServerInterfaceWrapper) GetDepartments(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDepartments(ctx)
	return err
}

// PostDepartments converts echo context to params.
func (w *ServerInterfaceWrapper) PostDepartments(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDepartmentsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDepartments(ctx, params)
	return err
}

// DeleteDepartmentsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDepartmentsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDepartmentsId(ctx, id)
	return err
}

// GetDepartmentsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetDepartmentsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDepartmentsId(ctx, id)
	return err
}

// PutDepartmentsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutDepartmentsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutDepartmentsIdParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDepartmentsId(ctx, id, params)
	return err
}

// GetDivisions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDivisions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDivisions(ctx)
	return err
}

// PostDivisions converts echo context to params.
func (w *ServerInterfaceWrapper) PostDivisions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDivisions(ctx)
	return err
}

// DeleteDivisionsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDivisionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDivisionsId(ctx, id)
	return err
}

// PutDivisionsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutDivisionsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDivisionsId(ctx, id)
	return err
}

// GetExpenses converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpenses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpenses(ctx)
	return err
}

// PostExpenses converts echo context to params.
func (w *ServerInterfaceWrapper) PostExpenses(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostExpensesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "year_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "year_id", ctx.QueryParams(), &params.YearId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostExpenses(ctx, params)
	return err
}

// GetExpensesDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpensesDetails(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpensesDetails(ctx)
	return err
}

// GetExpensesDetailsYear converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpensesDetailsYear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year int

	err = runtime.BindStyledParameterWithOptions("simple", "year", ctx.Param("year"), &year, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpensesDetailsYear(ctx, year)
	return err
}

// GetExpensesFiscalyearYear converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpensesFiscalyearYear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year int

	err = runtime.BindStyledParameterWithOptions("simple", "year", ctx.Param("year"), &year, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpensesFiscalyearYear(ctx, year)
	return err
}

// DeleteExpensesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteExpensesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteExpensesId(ctx, id)
	return err
}

// GetExpensesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpensesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpensesId(ctx, id)
	return err
}

// PutExpensesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutExpensesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutExpensesIdParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "year_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "year_id", ctx.QueryParams(), &params.YearId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutExpensesId(ctx, id, params)
	return err
}

// GetExpensesIdDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetExpensesIdDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetExpensesIdDetails(ctx, id)
	return err
}

// GetFestivalItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetFestivalItems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFestivalItemsParams
	// ------------- Optional query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, false, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// ------------- Optional query parameter "division_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "division_id", ctx.QueryParams(), &params.DivisionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter division_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFestivalItems(ctx, params)
	return err
}

// PostFestivalItems converts echo context to params.
func (w *ServerInterfaceWrapper) PostFestivalItems(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFestivalItems(ctx)
	return err
}

// DeleteFestivalItemsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFestivalItemsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFestivalItemsId(ctx, id)
	return err
}

// PutFestivalItemsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutFestivalItemsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutFestivalItemsId(ctx, id)
	return err
}

// GetFinancialRecords converts echo context to params.
func (w *ServerInterfaceWrapper) GetFinancialRecords(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFinancialRecordsParams
	// ------------- Optional query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, false, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFinancialRecords(ctx, params)
	return err
}

// PostFinancialRecords converts echo context to params.
func (w *ServerInterfaceWrapper) PostFinancialRecords(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFinancialRecords(ctx)
	return err
}

// DeleteFinancialRecordsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFinancialRecordsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFinancialRecordsId(ctx, id)
	return err
}

// PutFinancialRecordsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutFinancialRecordsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutFinancialRecordsId(ctx, id)
	return err
}

// GetFundInformations converts echo context to params.
func (w *ServerInterfaceWrapper) GetFundInformations(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFundInformations(ctx)
	return err
}

// PostFundInformations converts echo context to params.
func (w *ServerInterfaceWrapper) PostFundInformations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFundInformationsParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "teacher_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "teacher_id", ctx.QueryParams(), &params.TeacherId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teacher_id: %s", err))
	}

	// ------------- Required query parameter "price" -------------

	err = runtime.BindQueryParameter("form", true, true, "price", ctx.QueryParams(), &params.Price)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter price: %s", err))
	}

	// ------------- Optional query parameter "remark" -------------

	err = runtime.BindQueryParameter("form", true, false, "remark", ctx.QueryParams(), &params.Remark)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remark: %s", err))
	}

	// ------------- Optional query parameter "is_first_check" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_first_check", ctx.QueryParams(), &params.IsFirstCheck)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_first_check: %s", err))
	}

	// ------------- Optional query parameter "is_last_check" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_last_check", ctx.QueryParams(), &params.IsLastCheck)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_last_check: %s", err))
	}

	// ------------- Optional query parameter "received_at" -------------

	err = runtime.BindQueryParameter("form", true, false, "received_at", ctx.QueryParams(), &params.ReceivedAt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter received_at: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFundInformations(ctx, params)
	return err
}

// GetFundInformationsDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetFundInformationsDetails(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFundInformationsDetails(ctx)
	return err
}

// GetFundInformationsDetailsYear converts echo context to params.
func (w *ServerInterfaceWrapper) GetFundInformationsDetailsYear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year int

	err = runtime.BindStyledParameterWithOptions("simple", "year", ctx.Param("year"), &year, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFundInformationsDetailsYear(ctx, year)
	return err
}

// DeleteFundInformationsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFundInformationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFundInformationsId(ctx, id)
	return err
}

// GetFundInformationsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetFundInformationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFundInformationsId(ctx, id)
	return err
}

// PutFundInformationsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutFundInformationsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutFundInformationsIdParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Required query parameter "teacher_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "teacher_id", ctx.QueryParams(), &params.TeacherId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter teacher_id: %s", err))
	}

	// ------------- Required query parameter "price" -------------

	err = runtime.BindQueryParameter("form", true, true, "price", ctx.QueryParams(), &params.Price)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter price: %s", err))
	}

	// ------------- Optional query parameter "remark" -------------

	err = runtime.BindQueryParameter("form", true, false, "remark", ctx.QueryParams(), &params.Remark)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remark: %s", err))
	}

	// ------------- Optional query parameter "is_first_check" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_first_check", ctx.QueryParams(), &params.IsFirstCheck)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_first_check: %s", err))
	}

	// ------------- Optional query parameter "is_last_check" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_last_check", ctx.QueryParams(), &params.IsLastCheck)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_last_check: %s", err))
	}

	// ------------- Optional query parameter "received_at" -------------

	err = runtime.BindQueryParameter("form", true, false, "received_at", ctx.QueryParams(), &params.ReceivedAt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter received_at: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutFundInformationsId(ctx, id, params)
	return err
}

// GetFundInformationsIdDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetFundInformationsIdDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFundInformationsIdDetails(ctx, id)
	return err
}

// PostPasswordResetRequest converts echo context to params.
func (w *ServerInterfaceWrapper) PostPasswordResetRequest(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostPasswordResetRequestParams
	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPasswordResetRequest(ctx, params)
	return err
}

// PostPasswordResetId converts echo context to params.
func (w *ServerInterfaceWrapper) PostPasswordResetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPasswordResetId(ctx, id)
	return err
}

// PostPasswordResetIdValid converts echo context to params.
func (w *ServerInterfaceWrapper) PostPasswordResetIdValid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostPasswordResetIdValidParams
	// ------------- Optional query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, false, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostPasswordResetIdValid(ctx, id, params)
	return err
}

// GetReceipts converts echo context to params.
func (w *ServerInterfaceWrapper) GetReceipts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReceipts(ctx)
	return err
}

// PostReceipts converts echo context to params.
func (w *ServerInterfaceWrapper) PostReceipts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostReceipts(ctx)
	return err
}

// GetReceiptsReportsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetReceiptsReportsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReceiptsReportsId(ctx, id)
	return err
}

// DeleteReceiptsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteReceiptsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteReceiptsId(ctx, id)
	return err
}

// GetReceiptsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetReceiptsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReceiptsId(ctx, id)
	return err
}

// PutReceiptsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutReceiptsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutReceiptsId(ctx, id)
	return err
}

// GetSources converts echo context to params.
func (w *ServerInterfaceWrapper) GetSources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSources(ctx)
	return err
}

// PostSources converts echo context to params.
func (w *ServerInterfaceWrapper) PostSources(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostSourcesParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSources(ctx, params)
	return err
}

// DeleteSourcesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSourcesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSourcesId(ctx, id)
	return err
}

// GetSourcesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSourcesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSourcesId(ctx, id)
	return err
}

// PutSourcesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSourcesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutSourcesIdParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSourcesId(ctx, id, params)
	return err
}

// GetSponsors converts echo context to params.
func (w *ServerInterfaceWrapper) GetSponsors(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSponsors(ctx)
	return err
}

// PostSponsors converts echo context to params.
func (w *ServerInterfaceWrapper) PostSponsors(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSponsors(ctx)
	return err
}

// GetSponsorsPeriodsYear converts echo context to params.
func (w *ServerInterfaceWrapper) GetSponsorsPeriodsYear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year int

	err = runtime.BindStyledParameterWithOptions("simple", "year", ctx.Param("year"), &year, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSponsorsPeriodsYear(ctx, year)
	return err
}

// DeleteSponsorsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSponsorsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSponsorsId(ctx, id)
	return err
}

// GetSponsorsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSponsorsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSponsorsId(ctx, id)
	return err
}

// PutSponsorsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSponsorsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSponsorsId(ctx, id)
	return err
}

// GetSponsorstyles converts echo context to params.
func (w *ServerInterfaceWrapper) GetSponsorstyles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSponsorstyles(ctx)
	return err
}

// PostSponsorstyles converts echo context to params.
func (w *ServerInterfaceWrapper) PostSponsorstyles(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSponsorstyles(ctx)
	return err
}

// DeleteSponsorstylesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSponsorstylesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSponsorstylesId(ctx, id)
	return err
}

// GetSponsorstylesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetSponsorstylesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSponsorstylesId(ctx, id)
	return err
}

// PutSponsorstylesId converts echo context to params.
func (w *ServerInterfaceWrapper) PutSponsorstylesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSponsorstylesId(ctx, id)
	return err
}

// GetTeachers converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeachers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTeachers(ctx)
	return err
}

// PostTeachers converts echo context to params.
func (w *ServerInterfaceWrapper) PostTeachers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostTeachersParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "position" -------------

	err = runtime.BindQueryParameter("form", true, true, "position", ctx.QueryParams(), &params.Position)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter position: %s", err))
	}

	// ------------- Optional query parameter "department_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "department_id", ctx.QueryParams(), &params.DepartmentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter department_id: %s", err))
	}

	// ------------- Optional query parameter "room" -------------

	err = runtime.BindQueryParameter("form", true, false, "room", ctx.QueryParams(), &params.Room)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room: %s", err))
	}

	// ------------- Optional query parameter "is_black" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_black", ctx.QueryParams(), &params.IsBlack)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_black: %s", err))
	}

	// ------------- Optional query parameter "remark" -------------

	err = runtime.BindQueryParameter("form", true, false, "remark", ctx.QueryParams(), &params.Remark)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remark: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTeachers(ctx, params)
	return err
}

// DeleteTeachersDelete converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeachersDelete(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTeachersDelete(ctx)
	return err
}

// GetTeachersFundRegisteredYear converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeachersFundRegisteredYear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "year" -------------
	var year int

	err = runtime.BindStyledParameterWithOptions("simple", "year", ctx.Param("year"), &year, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTeachersFundRegisteredYear(ctx, year)
	return err
}

// DeleteTeachersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTeachersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTeachersId(ctx, id)
	return err
}

// GetTeachersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTeachersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTeachersId(ctx, id)
	return err
}

// PutTeachersId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTeachersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutTeachersIdParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "position" -------------

	err = runtime.BindQueryParameter("form", true, true, "position", ctx.QueryParams(), &params.Position)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter position: %s", err))
	}

	// ------------- Optional query parameter "department_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "department_id", ctx.QueryParams(), &params.DepartmentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter department_id: %s", err))
	}

	// ------------- Optional query parameter "room" -------------

	err = runtime.BindQueryParameter("form", true, false, "room", ctx.QueryParams(), &params.Room)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter room: %s", err))
	}

	// ------------- Optional query parameter "is_black" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_black", ctx.QueryParams(), &params.IsBlack)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter is_black: %s", err))
	}

	// ------------- Optional query parameter "remark" -------------

	err = runtime.BindQueryParameter("form", true, false, "remark", ctx.QueryParams(), &params.Remark)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter remark: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTeachersId(ctx, id, params)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostUsersParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "bureau_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "bureau_id", ctx.QueryParams(), &params.BureauId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bureau_id: %s", err))
	}

	// ------------- Required query parameter "role_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "role_id", ctx.QueryParams(), &params.RoleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx, params)
	return err
}

// DeleteUsersDelete converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersDelete(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersDelete(ctx)
	return err
}

// DeleteUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersId(ctx, id)
	return err
}

// GetUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersId(ctx, id)
	return err
}

// PutUsersId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutUsersIdParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Required query parameter "bureau_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "bureau_id", ctx.QueryParams(), &params.BureauId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bureau_id: %s", err))
	}

	// ------------- Required query parameter "role_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "role_id", ctx.QueryParams(), &params.RoleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersId(ctx, id, params)
	return err
}

// GetYears converts echo context to params.
func (w *ServerInterfaceWrapper) GetYears(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetYears(ctx)
	return err
}

// PostYears converts echo context to params.
func (w *ServerInterfaceWrapper) PostYears(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostYearsParams
	// ------------- Required query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, true, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostYears(ctx, params)
	return err
}

// GetYearsPeriods converts echo context to params.
func (w *ServerInterfaceWrapper) GetYearsPeriods(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetYearsPeriods(ctx)
	return err
}

// PostYearsPeriods converts echo context to params.
func (w *ServerInterfaceWrapper) PostYearsPeriods(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostYearsPeriods(ctx)
	return err
}

// DeleteYearsPeriodsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteYearsPeriodsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteYearsPeriodsId(ctx, id)
	return err
}

// PutYearsPeriodsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutYearsPeriodsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutYearsPeriodsId(ctx, id)
	return err
}

// DeleteYearsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteYearsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteYearsId(ctx, id)
	return err
}

// GetYearsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetYearsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetYearsId(ctx, id)
	return err
}

// PutYearsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutYearsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PutYearsIdParams
	// ------------- Required query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, true, "year", ctx.QueryParams(), &params.Year)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter year: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutYearsId(ctx, id, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/activities", wrapper.GetActivities)
	router.POST(baseURL+"/activities", wrapper.PostActivities)
	router.GET(baseURL+"/activities/details", wrapper.GetActivitiesDetails)
	router.GET(baseURL+"/activities/details/:year", wrapper.GetActivitiesDetailsYear)
	router.GET(baseURL+"/activities/filtered_details", wrapper.GetActivitiesFilteredDetails)
	router.GET(baseURL+"/activities/filtered_details/:year", wrapper.GetActivitiesFilteredDetailsYear)
	router.DELETE(baseURL+"/activities/:id", wrapper.DeleteActivitiesId)
	router.GET(baseURL+"/activities/:id", wrapper.GetActivitiesId)
	router.PUT(baseURL+"/activities/:id", wrapper.PutActivitiesId)
	router.GET(baseURL+"/activity_informations", wrapper.GetActivityInformations)
	router.POST(baseURL+"/activity_informations", wrapper.PostActivityInformations)
	router.DELETE(baseURL+"/activity_informations/:id", wrapper.DeleteActivityInformationsId)
	router.GET(baseURL+"/activity_informations/:id", wrapper.GetActivityInformationsId)
	router.PUT(baseURL+"/activity_informations/:id", wrapper.PutActivityInformationsId)
	router.GET(baseURL+"/activity_styles", wrapper.GetActivityStyles)
	router.POST(baseURL+"/activity_styles", wrapper.PostActivityStyles)
	router.DELETE(baseURL+"/activity_styles/:id", wrapper.DeleteActivityStylesId)
	router.GET(baseURL+"/activity_styles/:id", wrapper.GetActivityStylesId)
	router.PUT(baseURL+"/activity_styles/:id", wrapper.PutActivityStylesId)
	router.GET(baseURL+"/budgets", wrapper.GetBudgets)
	router.POST(baseURL+"/budgets", wrapper.PostBudgets)
	router.GET(baseURL+"/budgets/details", wrapper.GetBudgetsDetails)
	router.GET(baseURL+"/budgets/details/:year", wrapper.GetBudgetsDetailsYear)
	router.DELETE(baseURL+"/budgets/:id", wrapper.DeleteBudgetsId)
	router.GET(baseURL+"/budgets/:id", wrapper.GetBudgetsId)
	router.PUT(baseURL+"/budgets/:id", wrapper.PutBudgetsId)
	router.GET(baseURL+"/budgets/:id/details", wrapper.GetBudgetsIdDetails)
	router.GET(baseURL+"/bureaus", wrapper.GetBureaus)
	router.POST(baseURL+"/bureaus", wrapper.PostBureaus)
	router.DELETE(baseURL+"/bureaus/:id", wrapper.DeleteBureausId)
	router.GET(baseURL+"/bureaus/:id", wrapper.GetBureausId)
	router.PUT(baseURL+"/bureaus/:id", wrapper.PutBureausId)
	router.GET(baseURL+"/departments", wrapper.GetDepartments)
	router.POST(baseURL+"/departments", wrapper.PostDepartments)
	router.DELETE(baseURL+"/departments/:id", wrapper.DeleteDepartmentsId)
	router.GET(baseURL+"/departments/:id", wrapper.GetDepartmentsId)
	router.PUT(baseURL+"/departments/:id", wrapper.PutDepartmentsId)
	router.GET(baseURL+"/divisions", wrapper.GetDivisions)
	router.POST(baseURL+"/divisions", wrapper.PostDivisions)
	router.DELETE(baseURL+"/divisions/:id", wrapper.DeleteDivisionsId)
	router.PUT(baseURL+"/divisions/:id", wrapper.PutDivisionsId)
	router.GET(baseURL+"/expenses", wrapper.GetExpenses)
	router.POST(baseURL+"/expenses", wrapper.PostExpenses)
	router.GET(baseURL+"/expenses/details", wrapper.GetExpensesDetails)
	router.GET(baseURL+"/expenses/details/:year", wrapper.GetExpensesDetailsYear)
	router.GET(baseURL+"/expenses/fiscalyear/:year", wrapper.GetExpensesFiscalyearYear)
	router.DELETE(baseURL+"/expenses/:id", wrapper.DeleteExpensesId)
	router.GET(baseURL+"/expenses/:id", wrapper.GetExpensesId)
	router.PUT(baseURL+"/expenses/:id", wrapper.PutExpensesId)
	router.GET(baseURL+"/expenses/:id/details", wrapper.GetExpensesIdDetails)
	router.GET(baseURL+"/festival_items", wrapper.GetFestivalItems)
	router.POST(baseURL+"/festival_items", wrapper.PostFestivalItems)
	router.DELETE(baseURL+"/festival_items/:id", wrapper.DeleteFestivalItemsId)
	router.PUT(baseURL+"/festival_items/:id", wrapper.PutFestivalItemsId)
	router.GET(baseURL+"/financial_records", wrapper.GetFinancialRecords)
	router.POST(baseURL+"/financial_records", wrapper.PostFinancialRecords)
	router.DELETE(baseURL+"/financial_records/:id", wrapper.DeleteFinancialRecordsId)
	router.PUT(baseURL+"/financial_records/:id", wrapper.PutFinancialRecordsId)
	router.GET(baseURL+"/fund_informations", wrapper.GetFundInformations)
	router.POST(baseURL+"/fund_informations", wrapper.PostFundInformations)
	router.GET(baseURL+"/fund_informations/details", wrapper.GetFundInformationsDetails)
	router.GET(baseURL+"/fund_informations/details/:year", wrapper.GetFundInformationsDetailsYear)
	router.DELETE(baseURL+"/fund_informations/:id", wrapper.DeleteFundInformationsId)
	router.GET(baseURL+"/fund_informations/:id", wrapper.GetFundInformationsId)
	router.PUT(baseURL+"/fund_informations/:id", wrapper.PutFundInformationsId)
	router.GET(baseURL+"/fund_informations/:id/details", wrapper.GetFundInformationsIdDetails)
	router.POST(baseURL+"/password_reset/request", wrapper.PostPasswordResetRequest)
	router.POST(baseURL+"/password_reset/:id", wrapper.PostPasswordResetId)
	router.POST(baseURL+"/password_reset/:id/valid", wrapper.PostPasswordResetIdValid)
	router.GET(baseURL+"/receipts", wrapper.GetReceipts)
	router.POST(baseURL+"/receipts", wrapper.PostReceipts)
	router.GET(baseURL+"/receipts/reports/:id", wrapper.GetReceiptsReportsId)
	router.DELETE(baseURL+"/receipts/:id", wrapper.DeleteReceiptsId)
	router.GET(baseURL+"/receipts/:id", wrapper.GetReceiptsId)
	router.PUT(baseURL+"/receipts/:id", wrapper.PutReceiptsId)
	router.GET(baseURL+"/sources", wrapper.GetSources)
	router.POST(baseURL+"/sources", wrapper.PostSources)
	router.DELETE(baseURL+"/sources/:id", wrapper.DeleteSourcesId)
	router.GET(baseURL+"/sources/:id", wrapper.GetSourcesId)
	router.PUT(baseURL+"/sources/:id", wrapper.PutSourcesId)
	router.GET(baseURL+"/sponsors", wrapper.GetSponsors)
	router.POST(baseURL+"/sponsors", wrapper.PostSponsors)
	router.GET(baseURL+"/sponsors/periods/:year", wrapper.GetSponsorsPeriodsYear)
	router.DELETE(baseURL+"/sponsors/:id", wrapper.DeleteSponsorsId)
	router.GET(baseURL+"/sponsors/:id", wrapper.GetSponsorsId)
	router.PUT(baseURL+"/sponsors/:id", wrapper.PutSponsorsId)
	router.GET(baseURL+"/sponsorstyles", wrapper.GetSponsorstyles)
	router.POST(baseURL+"/sponsorstyles", wrapper.PostSponsorstyles)
	router.DELETE(baseURL+"/sponsorstyles/:id", wrapper.DeleteSponsorstylesId)
	router.GET(baseURL+"/sponsorstyles/:id", wrapper.GetSponsorstylesId)
	router.PUT(baseURL+"/sponsorstyles/:id", wrapper.PutSponsorstylesId)
	router.GET(baseURL+"/teachers", wrapper.GetTeachers)
	router.POST(baseURL+"/teachers", wrapper.PostTeachers)
	router.DELETE(baseURL+"/teachers/delete", wrapper.DeleteTeachersDelete)
	router.GET(baseURL+"/teachers/fundRegistered/:year", wrapper.GetTeachersFundRegisteredYear)
	router.DELETE(baseURL+"/teachers/:id", wrapper.DeleteTeachersId)
	router.GET(baseURL+"/teachers/:id", wrapper.GetTeachersId)
	router.PUT(baseURL+"/teachers/:id", wrapper.PutTeachersId)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/delete", wrapper.DeleteUsersDelete)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUsersId)
	router.GET(baseURL+"/users/:id", wrapper.GetUsersId)
	router.PUT(baseURL+"/users/:id", wrapper.PutUsersId)
	router.GET(baseURL+"/years", wrapper.GetYears)
	router.POST(baseURL+"/years", wrapper.PostYears)
	router.GET(baseURL+"/years/periods", wrapper.GetYearsPeriods)
	router.POST(baseURL+"/years/periods", wrapper.PostYearsPeriods)
	router.DELETE(baseURL+"/years/periods/:id", wrapper.DeleteYearsPeriodsId)
	router.PUT(baseURL+"/years/periods/:id", wrapper.PutYearsPeriodsId)
	router.DELETE(baseURL+"/years/:id", wrapper.DeleteYearsId)
	router.GET(baseURL+"/years/:id", wrapper.GetYearsId)
	router.PUT(baseURL+"/years/:id", wrapper.PutYearsId)

}
